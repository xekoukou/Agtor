{-# OPTIONS --safe --without-K --exact-split #-}

open import MLTT.Spartan
open import UF.Subsingletons

module Final-CoAlgebra-Properties  where

open import Final-CoAlgebraP
open import CoAlgebraP
open import FunctorP


open import UF.FunExt
open import UF.Univalence
open import UF.Equiv

module _ (fe : Fun-Ext) (UA : Univalence) func (fc' : Final-CoAlgebra {ùì§ = ùì§} func) where
 open Functor func
 open Final-CoAlgebra func fc'
 private
  module FC = CoAlgebra func fc
 open CoAlgebra‚ÇÇ func

 f-co : CoAlgebra func
 f-co = Fn FC.type , Fm FC.morph
 private 
  module F-Co = CoAlgebra func f-co

 inv-morph : f-co-morphism f-co fc
 inv-morph = uni f-co .pr‚ÇÅ

 private
  module Inv = Morphism f-co fc inv-morph

 morph : f-co-morphism fc fc
 morph = Inv.morphism ‚àò FC.morph , Œª x ‚Üí (Fm-comp Inv.morphism FC.morph (FC.morph x)) ‚Åª¬π ‚àô Inv.property (FC.morph x)
 
 morph-id : f-co-morphism fc fc
 morph-id = (Œª x ‚Üí x) , (Œª x ‚Üí Fm-id (FC.morph x) ) 

 inv‚àòQf=id : Inv.morphism ‚àò FC.morph Ôºù id
 inv‚àòQf=id = l2 ‚Åª¬π ‚àô l3  where
  l1 = uni fc
  c = l1 .pr‚ÇÅ
  l2 : c .pr‚ÇÅ Ôºù morph .pr‚ÇÅ
  l2 = ap pr‚ÇÅ (l1 .pr‚ÇÇ morph)

  l3 : c .pr‚ÇÅ Ôºù morph-id .pr‚ÇÅ
  l3 = ap pr‚ÇÅ (l1 .pr‚ÇÇ morph-id)

 Qf‚àòinv=id : FC.morph ‚àò Inv.morphism Ôºù (Œª x ‚Üí x)
 Qf‚àòinv=id = (dfunext fe Œª x ‚Üí Inv.property x ‚Åª¬π ‚àô (Fm-comp Inv.morphism FC.morph x ‚àô ((ap (Œª z ‚Üí Fm z x) inv‚àòQf=id) ‚àô Fm-id x) ))

 QE=FQE : FC.type Ôºù Fn FC.type
 QE=FQE = eqtoid (UA _) FC.type (Fn FC.type) (qinveq FC.morph (Inv.morphism , (Œª x ‚Üí ap (Œª f ‚Üí f x) inv‚àòQf=id) , (Œª x ‚Üí ap (Œª f ‚Üí f x) Qf‚àòinv=id)))
