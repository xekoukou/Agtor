{-# OPTIONS --safe --guardedness --without-K --exact-split #-}

open import MLTT.Spartan hiding (ùüö)
open import MLTT.Negation
open import MLTT.Plus
open import UF.FunExt
open import MLTT.List
open import UF.Subsingletons
open import Naturals.Order
open import UF.Subsingletons-FunExt
open import UF.PropTrunc


-- This version tries to use coinductive records instead of a coalgebra.

module SType3 (fe : Fun-Ext) (pt : propositional-truncations-exist) (UA : _) (Msg : ùì§ Ãá) where

open PropositionalTruncation pt
open import BSet fe Msg
open import PSet fe pt Msg
open import CoAlgebra fe pt UA Msg


record SType : ùì§ ‚Å∫‚Å∫ Ãá  where
 coinductive
 field
  supPos : PSet
  inner : SType
  extern : ExC SType
  
open SType



st-CoAlgebra : CoAlgebra
CoAlgebra.E st-CoAlgebra = SType
CoAlgebra.f st-CoAlgebra x = supPos x , (inner x) , (extern x)


inv : PSet √ó SType √ó ExC SType ‚Üí SType
supPos (inv (a , b , c)) = a
inner (inv (a , b , c)) = b
extern (inv (a , b , c)) = c

module _ where

 open CoAlgebra
 open CoAlgebra-morphism
      
 
 st-FCoAlgebra : Final-CoAlgebra
 Final-CoAlgebra.co st-FCoAlgebra = st-CoAlgebra
 Final-CoAlgebra.uni st-FCoAlgebra a = (d ‚àò (f a) , co-morph refl) , q where
  d : F (E a) ‚Üí SType
  supPos (d (ps , int , ex)) = ps
  inner (d (ps , int , ex)) = d (f a int)
  extern (d (ps , int , (ex1 , ex2))) = ex1 , (Œª x x‚ÇÅ ‚Üí d (f a (ex2 x x‚ÇÅ)))

  q : is-central
       (Œ£ (coalg-morphism (Final-CoAlgebra.co st-FCoAlgebra) a))
       ((Œª x ‚Üí d (f a x)) , co-morph refl)
  q x = {!!}

 
-- module _ where
--  open embed st-FCoAlgebra


--  z : ExC SType ‚Üí SType
--  ‚à£‚ü® supPos (z ((bsa , bsm) , f)) ‚ü© &ps = ‚à• Œ£ x Íûâ Msg , Œ£ p Íûâ bsa x + bsm x , ‚à£‚ü® supPos (f x p) ‚ü© &ps ‚à•
--  ‚à£-is-prop (supPos (z ((bsa , bsm) , f))) &ps = ‚à•‚à•-is-prop
--  inner (z ((bsa , bsm) , f)) = z ((bsa , bsm) , (Œª x p ‚Üí inner (f x p)))
--  extern (z ((bsa , bsm) , f)) = e where
--   nbsa : BSet
--   nbsa mp =  Œ£ x Íûâ Msg , Œ£ p Íûâ bsa x + bsm x , pr‚ÇÅ (pr‚ÇÅ (extern (f x p))) mp
--   nbsm : BSet
--   nbsm mp =  Œ£ x Íûâ Msg , Œ£ p Íûâ bsa x + bsm x , pr‚ÇÇ (pr‚ÇÅ (extern (f x p))) mp
--   e : ExC SType
--   e = ((Œª x ‚Üí ‚à• nbsa x ‚à•) , (Œª x ‚Üí ‚à• nbsm x ‚à•)) , Œª {x p ‚Üí z {!!}}



--  _‚à£·∂†_ : (x y : SType) ‚Üí SType
--  qx ‚à£·∂† qy = z ((‚ä§B , ‚ä§B) , Œª { x (inl q) ‚Üí qx ; x (inr q) ‚Üí qy })


-- --  _&·∂†_ : (x y : ExC SType) ‚Üí SType
-- --  supPos (qx@((bsaX , bsmX) , X) &·∂† qy@((bsaY , bsmY) , Y)) = supPos (z qx) &·µñ supPos (z qy)
-- --  inner (px &·∂† py) = (inner qx ‚à£·∂† inner qy) ‚à£·∂† ({!!} &·∂† {!!}) where
-- --   qx = z px
-- --   qy = z py
-- --   excX = extern qx
-- --   excY = extern qy
-- --   bsX = pr‚ÇÅ excX
-- --   bsaX = pr‚ÇÅ bsX
-- --   bsmX = pr‚ÇÇ bsX
-- --   X = pr‚ÇÇ excX
-- --   bsY = pr‚ÇÅ excY
-- --   bsaY = pr‚ÇÅ bsY
-- --   bsmY = pr‚ÇÇ bsY
-- --   Y = pr‚ÇÇ excY
-- --  extern (((bsaX , bsmX) , X) &·∂† ((bsaY , bsmY) , Y)) = {!!}
-- --

--  _&·∂†_ : (x y : SType) ‚Üí SType
--  supPos (qx &·∂† qy) = supPos qx &·µñ supPos qy
--  inner (qx &·∂† qy) = (inner qx ‚à£·∂† inner qy) ‚à£·∂† ({!!} &·∂† {!!}) where -- z ((bsaX && bsmY , (bsaY && bsmX)) ,
--  -- Œª { x (inl (bsaX , bsmY)) ‚Üí {!!} &·∂† {!!}
--  --   ; x (inr (bsaY , bsmX)) ‚Üí {!!} }) where
--   excX = extern qx
--   excY = extern qy
--   bsX = pr‚ÇÅ excX
--   bsaX = pr‚ÇÅ bsX
--   bsmX = pr‚ÇÇ bsX
--   X = pr‚ÇÇ excX
--   bsY = pr‚ÇÅ excY
--   bsaY = pr‚ÇÅ bsY
--   bsmY = pr‚ÇÇ bsY
--   Y = pr‚ÇÇ excY

--  extern (qx &·∂† qy) = {!!}

